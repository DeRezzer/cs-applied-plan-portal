openapi: 3.0.2

info:
  description: >
    A portal that streamlines the planning process for Oregon State University
    CS Applied students and advisors
  version: 1.0.0
  title: OSU CS Applied Plan Portal
  contact:
    name: API support
    email: 'thomasza@oregonstate.edu'
  license:
    name: MIT License
    url: 'https://github.com/osu-capstone-cs72/cs-applied-plan-portal/blob/master/LICENSE'

paths:
  /comment:
    post:
      summary: Create a new Comment
      description: >
        Creates a new Comment related to an Applied plan
      operationId: createComment
      tags:
        - Comment
      requestBody:
        required: true
        description: A Comment object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Successfully added new Comment
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan with the specified `planId` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/comment/{commentId}':
    get:
      summary: Fetch data about a specific Comment
      description: >
        Returns information about a Comment with the provided `commentId`
      operationId: getCommentById
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          description: ID of the Comment to fetch
          required: true
          schema:
            type: integer
            format: int64
          example: 72
      responses:
        '200':
          description: Success
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan with the specified `commentId` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/course/{courseId}':
    get:
      summary: Fetch data about a specific Course
      description: >
        Returns information about a Course with the provided `courseId`.
      operationId: getCourseById
      tags:
        - Course
      parameters:
        - name: courseId
          in: path
          description: ID of the Course to fetch
          required: true
          schema:
            type: integer
            format: int64
          example: 72
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Course with the specified `courseId` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/course/{courseCode}':
    get:
      summary: Fetch data about a specific Course based on course code
      description: >
        Returns information about a specific Course with the provided course
        code.
      operationId: getCourseByCode
      tags:
        - Course
      parameters:
        - name: courseCode
          in: path
          description: Code of the Course to fetch
          required: true
          schema:
            type: string
          example: "CS493"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Course with the specified `courseCode` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/course/{courseName}':
    get:
      summary: Fetch data about a specific Course based on course name
      description: >
        Returns information about a specific Course with the provided course
        name.
      operationId: getCourseByName
      tags:
        - Course
      parameters:
        - name: courseName
          in: path
          description: Name of the Course to fetch
          required: true
          schema:
            type: string
          example: "Cloud Application Development"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '404':
          description: Course with the specified `courseName` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Notification routes here

  /plan:
    post:
      summary: Create a new applied Plan
      description: >
        Creates a new applied Plan in the database when a student submits one.
      operationId: createPlan
      tags:
        - Plan
      requestBody:
        required: true
        description: A Plan object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '201':
          description: Successfully added new Plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    description: Unique ID of the Plan
                    type: integer
                    format: int64
                    example: 72
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/plan/{planId}':
    get:
      summary: Fetch data about a specific applied Plan
      description: >
        Returns information about a specific applied Plan with the provided
        `planId`.
      operationId: getPlanById
      tags:
        - Plan
      parameters:
        - name: planId
          in: path
          description: ID of the plan to fetch
          required: true
          schema:
            type: integer
            format: int64
          example: 72
      responses:
        '200':
          description: Success
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan with the specified `planId` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Partially update a specific applied Plan
      description: >
        Performs a partial update to a specific applied Plan.
      operationId: updatePartialPlanById
      tags:
        - Plan
      parameters:
        - name: planId
          in: path
          description: ID of the plan to update
          required: true
          schema:
            type: integer
            format: int64
          example: 72
      requestBody:
        required: true
        description: A Plan object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '200':
          description: Successfully updated Plan
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan with the specified `planId` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Remove a specific applied Plan
      description: >
        Deletes an existing applied Plan from the database.
      operationId: deletePlanById
      tags:
        - Plan
      parameters:
        - name: planId
          in: path
          description: ID of the plan to remove
          required: true
          schema:
            type: integer
            format: int64
          example: 72
      responses:
        '204':
          description: Successfully deleted Plan
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan with the specified `planId` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/plan/{planId}/comments':
    get:
      summary: Fetch a list of comments linked to an applied Plan
      description: >
        Returns a list of comments related to an applied Plan with the provided
        `planId`.
      operationId: getCommentsOfPlan
      tags:
        - Plan
      parameters:
        - name: planId
          in: path
          description: ID of the plan to fetch
          required: true
          schema:
            type: integer
            format: int64
          example: 72
      responses:
        '200':
          description: Success
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Plan with the specified `planId` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user:
    post:
      summary: Create a new User
      description: >
        Creates a new User in the database.
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        description: A User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successfully added new User
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    description: Unique ID of the User
                    type: integer
                    format: int64
                    example: 72
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/login:
    post:
      summary: Log a User in
      description: >
        Logs the user in via ONID.
      operationId: login
      tags:
        - User
      responses:
        '200':
          description: Successfully logged in
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/logout:
    post:
      summary: Log a User out
      description: >
        Logs a user out.
      operationId: logout
      tags:
        - User
      responses:
        '200':
          description: Successfully logged out
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/user/{userId}':
    get:
      summary: Fetches information about a specific User
      description: >
        Returns information about a User with the provided `userId`.
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: 11-digit ID of the User to fetch
          required: true
          schema:
            type: string
          example: 12345678901
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User with the specified `onid` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/user/{onid}/plans':
    get:
      summary: Fetch a list of applied Plans that belong to this User
      description: >
        Fetches all applied Plans a specific User is completing/reviewing,
        depending on the role of that User in the system.
      operationId: getPlansOfUser
      tags:
        - User
      parameters:
        - name: onid
          in: path
          description: ONID of the User to fetch
          required: true
          schema:
            type: string
          example: doejohn
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User with the specified `onid` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Comment:
      description: An object representing information about a comment
      type: object
      properties:
        commentId:
          description: The ID to uniquely identify a comment
          type: integer
          format: int32
          minimum: 1
          example: 72
        planId:
          description: The ID of the plan to which the comment is attached
          type: integer
          format: int32
          minimum: 1
          example: 72
        userId:
          description: The 11-digit ID of the user who created the comment
          type: integer
          format: int64
          minimum: 10000000000
          maximum: 99999999999
          example: 72727272727
        time:
          description: The UTC time at which the comment was created
          type: string
          format: 'yyyy-mm-dd HH:MM:SS'
          minLength: 19
          maxLength: 19
          example: '2020-12-31 23:59:59'
        text:
          description: The text content of the comment
          type: string
          format: utf8
          minLength: 5
          maxLength: 500
          example: 'Your plan looks good!'

    Course:
      description: An object representing information about a course
      type: object
      properties:
        courseId:
          description: The ID to uniquely identify a course
          type: integer
          format: int32
          minimum: 1
          example: 72
        credits:
          description: The number of credits the course offers
          type: string
          format: int32
          minLength: 1
          maxLength: 25
          example: '4'
        courseName:
          description: The name of the course in the OSU catalog
          type: string
          format: utf8
          minLength: 1
          maxLength: 100
          example: CLOUD APPLICATION DEVELOPMENT
        courseCode:
          description: The code of the course in the OSU catalog
          type: string
          format: utf8
          minLength: 1
          maxLength: 25
          example: CS 493
        restriction:
          description: >
            Encodes different restriction of this course: `0` are any courses a
            student is allowed to select, `1` are required courses, and `2` are
            graduate courses
          type: integer
          format: int32
          minimum: 0
          maximum: 2
          example: 1
        description:
          description: The description of the course
          type: string
          format: utf8
          minLength: 1
          maxLength: 1000
          example: The quick brown fox jumps over the lazy dog
        prerequisites:
          description: >
            The condition which students must meet to take the course
          type: string
          format: utf8
          minLength: 0
          maxLength: 1000
          example: >
            Prerequisites: CS 344, 340, and 372. A minimum grade of C is
            required in CS 344, CS 340, and CS 372.

    Notification:
      description: >
        An object representing information about an application notification
      type: object
      properties:
        notificationId:
          description: The ID to uniquely identify a notification
          type: integer
          format: int32
          minimum: 1
          example: 72
        planId:
          description: The ID of the plan to which the notification belongs
          type: integer
          format: int32
          minimum: 1
          example: 72
        userId:
          description: The 11-digit ID of the user who created the notification
          type: integer
          format: int64
          minimum: 10000000000
          maximum: 99999999999
          example: 72727272727
        text:
          description: The text content of the notification
          type: string
          format: utf8
          minLength: 1
          maxLength: 100
          example: 'John Doe has added a new comment to the plan "CS plan".'
        type:
          description: >
            Encodes different types of notifications: `1` are notifications
            about comments on plans, `2` are notifications about plan status,
            and `3` are notifications about course update progress
          type: integer
          format: int32
          minimum: 1
          maximum: 3
          example: 1

    Plan:
      description: An object representing information about an applied plan
      type: object
      properties:
        planId:
          description: The ID to uniquely identify a plan
          type: integer
          format: int32
          minimum: 1
          example: 72
        status:
          description: >
            Encodes different statuses of a plan: `0` is Rejected, `1` is
            Awaiting Student Changes, `2` is Awaiting Review, `3` is
            Awaiting Final Review, and `4` is Accepted
          type: integer
          format: int32
          minimum: 0
          maximum: 4
          example: 3
        planName:
          description: The name of the plan
          type: string
          format: utf8
          minLength: 5
          maxLength: 50
          example: My AI Plan
        studentId:
          description: The 11-digit ID of the student who created the plan
          type: integer
          format: int64
          minimum: 10000000000
          maximum: 99999999999
          example: 72727272727
        created:
          description: The UTC time at which this plan was created
          type: string
          format: 'yyyy-mm-dd HH:MM:SS'
          minLength: 19
          maxLength: 19
          example: '2020-12-31 23:59:59'
        lastUpdated:
          description: The UTC time at which the plan was last changed
          type: string
          format: 'yyyy-mm-dd HH:MM:SS'
          minLength: 19
          maxLength: 19
          example: '2020-12-31 23:59:59'

    User:
      description: An object representing information about an application user
      type: object
      properties:
        userId:
          description: The 11-digit ID to uniquely identify a user
          type: integer
          format: int64
          minimum: 10000000000
          maximum: 99999999999
          example: 72727272727
        firstName:
          description: The first name of the user
          type: string
          minLength: 1
          maxLength: 50
          example: John
        lastName:
          description: The last name of the user
          type: string
          minLength: 1
          maxLength: 50
          example: Doe
        email:
          description: The OSU email of the user
          type: string
          format: email
          minLength: 1
          example: 'email@example.com'
        role:
          description: >
            Encodes the role of the user in the application: `0` is Student, `1`
            is Advisor, and `2` is Head Advisor
          type: integer
          format: int32
          minimum: 0
          maximum: 2
          example: 1

    Error:
      description: An object describing an error response from the system
      type: object
      properties:
        error:
          description: A message describing the error
          type: string
          format: utf8
          minLength: 1
          example: Internal Server Error

  requestBodies:
    Comment:
      description: A Comment object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'

    Course:
      description: A Course object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Course'

    Notification:
      description: A Notification object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Notification'

    Plan:
      description: A Plan object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Plan'

    User:
      description: A User object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

tags:
  - name: Comment
    description: API endpoints related to Comments
  - name: Course
    description: API endpoints related to Courses
  - name: Notification
    description: API endpoints related to Notifications
  - name: Plan
    description: API endpoints related to applied Plans
  - name: User
    description: API endpoints related to application Users
