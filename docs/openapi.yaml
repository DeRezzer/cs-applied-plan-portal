openapi: 3.0.2

info:
  description: >
    A portal that streamlines the planning process for Oregon State University
    CS Applied students and advisors


    [GitHub repository](https://github.com/osu-capstone-cs72/cs-applied-plan-portal)
  version: 1.0.0
  title: OSU CS Applied Plan Portal
  contact:
    name: API support
    email: 'thomasza@oregonstate.edu'
  license:
    name: MIT License
    url: 'https://github.com/osu-capstone-cs72/cs-applied-plan-portal/blob/master/LICENSE'

tags:
  - name: Comment
    description: API endpoints related to Comments
  - name: Course
    description: API endpoints related to Courses
  - name: Notification
    description: API endpoints related to Notifications
  - name: Plan
    description: API endpoints related to applied Plans
  - name: User
    description: API endpoints related to application Users

paths:
  /comment:
    post:
      summary: Create a new Comment
      description: >
        Creates a new Comment related to an applied Plan
      operationId: createComment
      tags:
        - Comment
      requestBody:
        $ref: '#/components/requestBodies/CommentBody_POST'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - insertId
                  - time
                properties:
                  insertId:
                    type: integer
                    format: int32
                    minimum: 1
                    example: 72
                  time:
                    type: string
                    format: 'yyyy-mm-dd HH:MM:SS'
                    minLength: 19
                    maxLength: 19
                    example: '2020-12-31 23:59:59'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'

  '/course/updateDatabase':
    get:
      summary: Sync Courses with the OSU catalog
      description: >
        Fetches live Courses from the OSU course catalog. Existing Courses are
        updated, and new Courses are added to the application database.
      operationId: getLiveCourses
      tags:
        - Course
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - note
                properties:
                  note:
                    type: string
                    minLength: 1
                    example: 'Courses update started.'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  '/course/search/{searchText}/{filterValue}':
    get:
      summary: Search Courses with text and filters
      description: >
        Returns information about a Course with the provided search text and
        filter value.
      operationId: getCourse
      tags:
        - Course
      parameters:
        - name: searchText
          in: path
          description: Text typed into the search bar
          required: true
          schema:
            type: string
            minLength: 1
          example: Engineering
        - name: filterValue
          in: path
          description: Index of the selected filter option in the dropdown
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
          example: 2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  courses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  /notification:
    get:
      summary: View Notifications owned by a User
      description: >
        Retrieves a set of Notifications owned by the logged in User.
      operationId: getNotifications
      tags:
        - Notification
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'

  '/notification/{notificationId}':
    delete:
      summary: Delete a Notification owned by a User
      description: >
        Delete a Notification owned by the logged in User.
      operationId: deleteNotification
      tags:
        - Notification
      parameters:
        - name: notificationId
          in: path
          description: Unique ID of the Notification to be deleted
          required: true
          schema:
            type: integer
            format: int32
            minLength: 1
          example: 72
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - affectedRows
                properties:
                  affectedRows:
                    type: integer
                    format: int32
                    minimum: 0
                    example: 1
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /plan:
    post:
      summary: Create a new applied Plan
      description: >
        Creates a new applied Plan in the database when a student submits one.
      operationId: createPlan
      tags:
        - Plan
      requestBody:
        $ref: '#/components/requestBodies/PlanBody_POST'
      responses:
        '201':
          description: Successfully added a new Plan
          content:
            application/json:
              schema:
                type: object
                required:
                  - insertId
                properties:
                  insertId:
                    description: Unique ID of the Plan
                    type: integer
                    format: int32
                    example: 72
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Update a specific applied Plan
      description: >
        Updates an existing applied Plan in the database
      operationId: updatePlan
      tags:
        - Plan
      requestBody:
        $ref: '#/components/requestBodies/PlanBody_PATCH'
      responses:
        '200':
          description: Successfully updated the Plan
          content:
            application/json:
              schema:
                type: object
                required:
                  - updatedName
                  - updatedCourses
                properties:
                  updatedName:
                    description: New name of the Plan
                    type: string
                    example: My updated AI plan
                  updatedCourses:
                    description: New list of Courses for the Plan
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  '/plan/recent':
    get:
      summary: Fetch a list of recently viewed Plan
      description: >
        Retrieves a list of recently viewed Plan by the logged in User.
      operationId: getRecentPlans
      tags:
        - Plan
      responses:
        '200':
          description: Recent Plans found
          content:
            application/json:
              schema:
                type: object
                required:
                  - planId
                  - planName
                  - firstName
                  - lastName
                  - status
                  - created
                  - lastUpdated
                  - userId
                properties:
                  planId:
                    description: The ID to uniquely identify a Plan
                    type: integer
                    format: int32
                    minimum: 1
                    example: 72
                  planName:
                    description: The name of the Plan
                    type: string
                    minLength: 5
                    maxLength: 50
                    example: My AI Plan
                  firstName:
                    description: The first name of the user
                    type: string
                    minLength: 1
                    maxLength: 50
                    example: John
                  lastName:
                    description: The last name of the user
                    type: string
                    minLength: 1
                    maxLength: 50
                    example: Doe
                  status:
                    description: >
                      Encodes different statuses of a Plan: `0` is Rejected, `1`
                      is Awaiting Student Changes, `2` is Awaiting Review, `3`
                      is Awaiting Final Review, and `4` is Accepted
                    type: integer
                    format: int32
                    minimum: 0
                    maximum: 4
                    example: 3
                  created:
                    description: The UTC time at which this Plan was created
                    type: string
                    format: 'yyyy-mm-dd HH:MM:SS'
                    minLength: 19
                    maxLength: 19
                    example: '2020-12-31 23:59:59'
                  lastUpdated:
                    description: The UTC time at which the Plan was last changed
                    type: string
                    format: 'yyyy-mm-dd HH:MM:SS'
                    minLength: 19
                    maxLength: 19
                    example: '2020-12-31 23:59:59'
                  userId:
                    description: >
                      The 11-digit ID of the student who created the Plan
                    type: integer
                    format: int64
                    minimum: 10000000000
                    maximum: 99999999999
                    example: 72727272727


  '/plan/{planId}':
    get:
      summary: Fetch all data about a specific applied Plan
      description: >
        Retrieves all data for a specific applied Plan, including selected
        Courses, User info, and Reviews
      operationId: getPlan
      tags:
        - Plan
      parameters:
        - name: planId
          in: path
          description: Unique ID of the Plan to fetch
          required: true
          schema:
            type: integer
            format: int64
          example: 72
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - required:
                      - planId
                      - status
                      - planName
                      - studentId
                      - created
                      - lastUpdated
                      - firstName
                      - lastName
                      - email
                  - properties:
                      firstName:
                        description: The first name of the user
                        type: string
                        minLength: 1
                        maxLength: 50
                        example: John
                      lastName:
                        description: The last name of the user
                        type: string
                        minLength: 1
                        maxLength: 50
                        example: Doe
                      email:
                        description: The OSU email of the user
                        type: string
                        format: email
                        minLength: 1
                        example: 'email@example.com'
                  - $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  # '/user/search/{text}/{role}/{cursorPrimary}/{cursorSecondary}':
  #   get:

  /user:
    post:
      summary: Fetch a list of applied Plans that belong to this User
      description: >
        Fetches all applied Plans a specific User is completing/reviewing,
        depending on the role of that User in the system.
      operationId: getPlansOfUser
      tags:
        - User
      parameters:
        - name: onid
          in: path
          description: ONID of the User to fetch
          required: true
          schema:
            type: string
          example: doejohn
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Request not made by an authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User with the specified `onid` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # '/user/authenticated':
  #   get:

  # '/user/login':
  #   get:

  # '/user/{userId}/plans':
  #   get:

  # '/user/{userId}':
  #   get:

components:
  schemas:
    Comment:
      description: An object representing information about a comment
      type: object
      required:
        - commentId
        - planId
        - userId
        - time
        - text
      properties:
        commentId:
          allOf:
            - description: The unique identifier of the comment
            - $ref: '#/components/schemas/Id'
        planId:
          allOf:
            - description: >
                The unique identifier of the plan to which the comment is
                attached
            - $ref: '#/components/schemas/Id'
        userId:
          allOf:
            - description: >
                The 11-digit unique identifier of the user who created the
                comment
            - $ref: '#/components/schemas/BigId'
        time:
          allOf:
            - description: The UTC time at which the comment was created
            - $ref: '#/components/schemas/UtcTime'
        text:
          description: The text content of the comment
          type: string
          minLength: 5
          maxLength: 500
          example:
            $ref: '#/components/examples/Text/value'

    Course:
      description: An object representing information about a course
      type: object
      required:
        - courseId
        - credits
        - courseName
        - courseCode
        - restriction
        - description
        - prerequisites
      properties:
        courseId:
          allOf:
            - description: The unique identifier of the course
            - $ref: '#/components/schemas/Id'
        credits:
          description: The number of credits the course offers
          type: string
          format: int32
          minLength: 1
          maxLength: 25
          example:
            $ref: '#/components/examples/CourseCredits/value'
        courseName:
          description: The name of the course in the OSU catalog
          type: string
          minLength: 1
          maxLength: 100
          example:
            $ref: '#/components/examples/CourseName/value'
        courseCode:
          description: The code of the course in the OSU catalog
          type: string
          minLength: 1
          maxLength: 25
          example:
            $ref: '#/components/examples/CourseCode/value'
        restriction:
          description: >
            Encodes different restriction of the course: `0` are any courses a
            student is allowed to select, `1` are required courses, and `2` are
            graduate courses
          type: integer
          format: int32
          minimum: 0
          maximum: 2
          example:
            $ref: '#/components/examples/CourseRestriction/value'
        description:
          description: The description of the course
          type: string
          minLength: 1
          maxLength: 1000
          example:
            $ref: '#/components/examples/CourseDescription/value'
        prerequisites:
          description: The condition which students must meet to take the course
          type: string
          minLength: 0
          maxLength: 1000
          example:
            $ref: '#/components/examples/CoursePrerequisites/value'

    Notification:
      description: An object representing information about a notification
      type: object
      required:
        - notificationId
        - planId
        - userId
        - text
        - type
      properties:
        notificationId:
          allOf:
            - description: The unique identifier of the notification
            - $ref: '#/components/schemas/Id'
        planId:
          allOf:
            - description: >
                The unique identifier of the plan that owns the notification
            - $ref: '#/components/schemas/Id'
        userId:
          allOf:
            - description: >
                The 11-digit unique identifier of the user who owns the
                notification
            - $ref: '#/components/schemas/BigId'
        text:
          description: The text content of the notification
          type: string
          minLength: 1
          maxLength: 100
          example:
            $ref: '#/components/examples/Text/value'
        type:
          description: >
            Encodes different types of the notification: `1` are notifications
            about comments on plans, `2` are notifications about plan status,
            and `3` are notifications about course update progress
          type: integer
          format: int32
          minimum: 1
          maximum: 3
          example:
            $ref: '#/components/examples/NotificationType/value'

    Plan:
      description: An object representing information about an applied plan
      type: object
      required:
        - planId
        - status
        - planName
        - studentId
        - created
        - lastUpdated
      properties:
        planId:
          allOf:
            - description: The unique identifier of the plan
            - $ref: '#/components/schemas/Id'
        status:
          description: >
            Encodes different statuses of the plan: `0` is Rejected, `1` is
            Awaiting Student Changes, `2` is Awaiting Review, `3` is
            Awaiting Final Review, and `4` is Accepted
          type: integer
          format: int32
          minimum: 0
          maximum: 4
          example:
            $ref: '#/components/examples/PlanStatus/value'
        planName:
          description: The name of the plan
          type: string
          minLength: 5
          maxLength: 50
          example:
            $ref: '#/components/examples/PlanName/value'
        studentId:
          allOf:
            - description: >
                The 11-digit unique identifier of the student who created the
                plan
            - $ref: '#/components/schemas/BigId'
        created:
          allOf:
            - description: The UTC time at which the plan was created
            - $ref: '#/components/schemas/UtcTime'
        lastUpdated:
          allOf:
            - description: The UTC time at which the plan was last changed
            - $ref: '#/components/schemas/UtcTime'

    PlanReview:
      description: An object representing information about a plan review
      type: object
      required:
        - reviewId
        - planId
        - userId
        - status
        - time
      properties:
        reviewId:
          allOf:
            - description: The unique identifier of the review
            - $ref: '#/components/schemas/Id'
        planId:
          allOf:
            - description: >
                The unique identifier of the plan to which the review is
                attached
            - $ref: '#/components/schemas/Id'
        userId:
          allOf:
            - description: >
                The 11-digit uniquely identifier of the user who created the
                review
            - $ref: '#/components/schemas/BigId'
        status:
          description: >
            Encodes different statuses of a plan: `0` is Rejected, `1` is
            Awaiting Student Changes, `2` is Awaiting Review, `3` is
            Awaiting Final Review, and `4` is Accepted
          type: integer
          format: int32
          minimum: 0
          maximum: 4
          example:
            $ref: '#/components/examples/PlanStatus/value'
        time:
          allOf:
            - description: The UTC time at which the review was created
            - $ref: '#/components/schemas/UtcTime'

    RecentPlan:
      description: >
        An object representing information about a recently viewed applied plan
      type: object
      required:
        - recentId
        - planId
        - userId
        - time
      properties:
        planId:
          allOf:
            - description: The unique identifier of the plan
            - $ref: '#/components/schemas/Id'
        userId:
          allOf:
            - description: >
                The 11-digit unique identifier of the student who created the
                plan
            - $ref: '#/components/schemas/BigId'
        time:
          allOf:
            - description: The UTC time at which the plan was created
            - $ref: '#/components/schemas/UtcTime'

    SelectedCourse:
      description: >
        An object representing information about selected courses in an applied
        plan
      type: object
      required:
        - planId
        - courseId
        - credits
      properties:
        planId:
          allOf:
            - description: The unique identifier of the plan
            - $ref: '#/components/schemas/Id'
        courseId:
          allOf:
            - description: >
                The unique identifier of the course selected for the plan
            - $ref: '#/components/schemas/BigId'
        credits:
          $ref: '#/components/schemas/CourseCredits'

    User:
      description: An object representing information about an application user
      type: object
      required:
        - userId
        - firstName
        - lastName
        - email
        - role
      properties:
        userId:
          allOf:
            - description: The 11-digit ID to uniquely identify a user
            - $ref: '#/components/schemas/BigId'
        firstName:
          description: The first name of the user
          type: string
          minLength: 1
          maxLength: 50
          example:
            $ref: '#/components/examples/FirstName/value'
        lastName:
          description: The last name of the user
          type: string
          minLength: 1
          maxLength: 50
          example:
            $ref: '#/components/examples/LastName/value'
        email:
          description: The OSU email of the user
          type: string
          format: email
          minLength: 1
          example:
            $ref: '#/components/examples/Email/value'
        role:
          description: >
            Encodes the role of the user in the application: `0` is Student, `1`
            is Advisor, and `2` is Head Advisor
          type: integer
          format: int32
          minimum: 0
          maximum: 2
          example:
            $ref: '#/components/examples/UserRole/value'

    Id:
      type: integer
      format: int32
      minimum: 1
      maximum: 4294967295
      example:
        $ref: '#/components/examples/Id/value'

    BigId:
      type: integer
      format: int64
      minimum: 10000000000
      maximum: 99999999999
      example:
        $ref: '#/components/examples/BigId/value'

    UtcTime:
      type: string
      format: 'yyyy-mm-dd HH:MM:SS'
      minLength: 19
      maxLength: 19
      example:
        $ref: '#/components/examples/UtcTime/value'

    Error:
      description: An object describing an error response from the system
      type: object
      required:
        - error
      properties:
        error:
          description: A message describing the error
          type: string
          minLength: 1
          example: Something's wrong

  requestBodies:
    CommentBody_POST:
      description: A Comment object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'

    PlanBody_POST:
      description: A Plan object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Plan'

    PlanBody_PATCH:
      description: A Plan object
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Plan'
              - properties:
                  courses:
                    description: A list of selected Courses
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'

    UserBody:
      description: A User object
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

  responses:
    '400':
      description: Missing or invalid request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '401':
      description: Missing or invalid authentication credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '403':
      description: Not allowed to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '404':
      description: Specified resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  examples:
    BigId:
      summary: An example of a big unique identifier
      value: 72727272727
    CourseCode:
      summary: An example of the code of a course
      value: CS 493
    CourseCredits:
      summary: An example of the number of credits a course offers
      value: '4'
    CourseName:
      summary: An example of the name of a course
      value: CLOUD APPLICATION DEVELOPMENT
    CourseDescription:
      summary: An example of the description of a course
      value: Covers developing RESTful cloud services.
    CoursePrerequisites:
      summary: An example of the prerequisites of a course
      value: A minimum grade of C is required in CS 290 and CS 261.
    CourseRestriction:
      summary: An example of the restriction code of a course
      value: 1
    Email:
      summary: An example of an email
      value: email@example.com
    FirstName:
      summary: An example of a first name
      value: John
    Id:
      summary: An example of a unique identifier
      value: 72
    LastName:
      summary: An example of a last name
      value: Doe
    NotificationType:
      summary: An example of the type of a notification
      value: 1
    PlanName:
      summary: An example of the name of an applied plan
      value: My AI plan
    PlanStatus:
      summary: An example of the status code of an applied plan
      value: 3
    Text:
      summary: An example of a text content
      value: The quick brown fox jumps over the lazy dog.
    UserRole:
      summary: An example of the role code of a user
      value: 1
    UtcTime:
      summary: An example of a time value in UTC format
      value: '2020-12-31 23:59:59'
